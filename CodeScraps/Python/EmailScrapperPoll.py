# This Script "EmailScrapper.py" is a utility script for turning emails in Outlook into text files
# Dependencies: Outlook Account, Outlook Client, Python 3.x, pypiwin32 python library (can be acquired via pip install pypiwin32)

import win32com.client
import os
import sys
import datetime
import shutil
import time

outlook = win32com.client.Dispatch("Outlook.Application")
myfolder = outlook.GetNamespace("MAPI").Folders["QATest@systechone.com"]
#qatest@systechone.com is the email account in Outlook that you want to use for the script, change it to a different
#Email address if you would rather use a different Email Address
inbox = myfolder.Folders["Duplicate Check"]
#for this test, we use the folder in outlook called Data Integrity Agent, this can be changed depending on the test
currentWorkingDirectory = os.path.dirname(os.path.realpath(__file__))
EnableLogging = True
#EnableLogging is a variable that is used to enable or disable the various log statements that are written to
#EmailScrapper.log

def log_output(output):
    #writes out statements to a log file for debugging
    if EnableLogging:
        with open(currentWorkingDirectory + "/EmailScrapper.log", "a") as logFile:
            logFile.write(datetime.datetime.now().strftime("%m/%d/%y %H:%M:%S     ") + output + "\n")
            logFile.close()


def get_emails(folder, numEmails):
    #get all emails from Outlook, save them individually as .txt file then deletes the email from Outlook
    #the txt files generated by this function are stored in ./Emails/
    log_output("Emails Detected. Beginning Download of Emails to folder: " + currentEmailsFolder)
    log_output("Number of Emails in Outlook: " + str(len(inbox.Items)))

    for emailCount, message in enumerate(inbox.Items):
        messageBody = message.Body.strip()
        numEmails = numEmails + 1
        with open(folder + "/Email_" + str(numEmails) + ".txt", "w") as outfile:
            outfile.write(messageBody)

    for i in reversed(range(len(inbox.Items))):
        inbox.Items[i].Delete()
    log_output("Number of Emails in Outlook: " + str(len(inbox.Items)))
    return numEmails


#this is the main loop of the script
currentEmailsFolder = currentWorkingDirectory + "\Emails"

try:
    shutil.rmtree(currentEmailsFolder)
finally:
    #./Emails/ should be guaranteed to be gone by now
    os.mkdir(currentEmailsFolder)

#checks the inbox for more emails every certain second period. If the duration has gone by without a new email, loop finishes.
#duration is reduced upon finding the first email, having confirmed that the server is finished, working, and sending out emails.
log_output("Initiating Email Download Procedure...")
period = 5
durationInitial = 600
durationPost = 60

#True = Looking for emails
#False = not expecting emails (so it doesn't need to wait around for 10 minutes)
if (len(sys.argv) == 2):
	if sys.argv[1] == "False":
		durationInitial = durationPost

numEmails = 0
timer = 0
duration = durationInitial

while (timer < duration):
    time.sleep(period)
    timer = timer + period
    if (len(inbox.Items) > 0):
        numEmails = get_emails(currentEmailsFolder, numEmails)
        timer = 0
        duration = durationPost
		
log_output("Email Download Procedure complete. " + str(numEmails) + " total emails downloaded.")